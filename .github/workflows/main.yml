name: Terraform Deployment to Azure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to deploy'
        required: true
        type: choice
        options:
          - both
          - staging
          - production
      destroy:
        description: 'Set true to destroy the environment'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  id-token: write     # needed for OIDC login
  contents: read

jobs:
  terraform:
    name: 'Terraform Apply or Destroy'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.4

      - name: Install Make (optional)
        run: sudo apt-get update && sudo apt-get install -y make

      - name: Login to Azure via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run Terraform for selected environment(s)
        shell: bash
        run: |
          set -euo pipefail

          # pick staging/production/both
          if [[ "${{ github.event.inputs.environment }}" == "both" ]]; then
            ENVIRONMENTS=("staging" "production")
          else
            ENVIRONMENTS=("${{ github.event.inputs.environment }}")
          fi

          # initialize against Azure backend
          terraform init -input=false -reconfigure

          for ENV in "${ENVIRONMENTS[@]}"; do
            echo "==> Deploying environment: $ENV"

            # select or create workspace
            terraform workspace select "$ENV" || terraform workspace new "$ENV"

            terraform validate

            if [[ "${{ github.event.inputs.destroy }}" == "true" ]]; then
              terraform destroy -auto-approve
            else
              terraform apply -auto-approve
            fi
          done

